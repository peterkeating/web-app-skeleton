<?xml version="1.0"?>
<!DOCTYPE project>
<project name="app-build" default="build" basedir="../">

    <!--
        Gives access to environment variables.
    -->
    <property environment="ENV" />

    <!--
        Loads the project specific configuration values.
    -->
    <property file="build/config/project.properties"/>

    <!--
        Load in Ant-Contrib to give us access to some very useful tasks!
        Learn more about Ant-Contrib and the extra functionality it offers from
        the link below.

        - http://ant-contrib.sourceforge.net/
    -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${tool.antcontrib}"/>
        </classpath>
    </taskdef>

    <!--
        Default target will build the project created artifacts that will be
        placed in the distribution directory.
    -->
    <target name="build" depends="-clean, -prepare, -copy, -css, -js, -package, -tidy" />

    <!--
        In an attempt to save valuable bytes the images can be compressed to reduce
        their filesize. Running 'ant images' will take the images in the images
        directory and optimise, sticking the artifacts in an optimised images directory
        where you can choose to use them or not. To use them simply copy and paste
        the image from the optimised directory into the original images directory.
    -->
    <target name="images" depends="-images-prepare, -imagespng" />

    <!--
        Removes any previous artifacts from previous build attempts.
    -->
    <target name="-clean">
        <delete dir="${dist.dir}" />
        <delete dir="${intermediate.dir}" />
    </target>

    <!--
        Create any directories needed during the build task.
    -->
    <target name="-prepare">
        <mkdir dir="${dist.dir}" />
        <mkdir dir="${intermediate.dir}" />
    </target>

    <!--
        Files are copied from the src directory into an intermediate directory.
        This ensures that the src files are not manipulated in a way that would
        cause them to change and potentially break the product.

        Also by copying the files into a middle man directory any changes made
        doesn't trigger a change that would be picked up by any version control
        solutions that might be running.

        The intermediate directory should be ignored by any version control solutions.
    -->
    <target name="-copy">
        <copy todir="${intermediate.dir}">
            <fileset dir="${app.dir}" />
        </copy>
    </target>

    <!--
        Handles configuration and optimisation of the application CSS.
    -->
    <target name="-css" depends="-css.min, -css.cache" />

    <!--
        In order to decrease the time to load the CSS all the white space & comments
        are stripped out using YUICompressor. The link below goes gives more detail
        about how the YUICompressor performs minification on the CSS.

        - http://developer.yahoo.com/yui/compressor/css.html
    -->
    <target name="-css.min">
        <apply executable="java">
            <fileset dir="${intermediate.dir}/css" includes="styles.css" />
            <arg line="-jar"/>
            <arg path="${tool.yuicompressor}"/>
            <srcfile/>
            <arg line="--type css"/>
            <arg line="-o"/>
            <mapper type="merge" to="${intermediate.dir}/css/styles.min.css"/>
            <targetfile/>
        </apply>
    </target>

    <!--
        Changes the filename of the stylesheet to a randomly generated name to
        give the stylesheet a new URL. Any changes to the styles are guaranteed
        to be served to users even if they have visited the web application before.
        This method is known as cache busting. Just to stress, when the user revisits
        the web application and the build process hasn't been run, then the stylesheet
        should be retrieved from the cache.

        The process of setting up the cache bust is described below.
            - Generate a random filename.
            - Copy the minified stylesheet to a file with the randomly generated
              filename that will act as the cache busting stylesheet.
            - Change the URL in all HTML pages that use the original stylesheet
              to point at the cache busting stylesheet.
            - Only the cache busting stylesheet is required so the others can be
              deleted.
    -->
    <target name="-css.cache">
        <checksum file="${intermediate.dir}/css/styles.min.css" algorithm="sha" property="css.fullsha" />
        <propertyregex property="css.sha" input="${css.fullsha}" regexp=".{${hash.length}}" select="\0" />
        <property name="style.css" value="css/${css.sha}.css" />
        <copy file="${intermediate.dir}/css/styles.min.css" tofile="${intermediate.dir}/css/${css.sha}.css" />

        <replaceregexp  match="&lt;link(.+)href=['&quot;]?(.*)/styles.css(?:\?.*)?['&quot;\s]?(.*/?&gt;)"
                        replace="&lt;link\1href='\2/${css.sha}.css'\3" flags="m">
            <fileset dir="${intermediate.dir}" includes="${page-files}"/>
        </replaceregexp>

        <delete includeemptydirs="true">
            <fileset dir="${intermediate.dir}/css" excludes="${css.sha}.css" />
        </delete>
    </target>

    <!--
        Runs targets that are associated to handling the JavaScript.
    -->
    <target name="-js" depends="-js.optimise, -js.concat, -js.cache" />

    <!--
        Uses the RequireJS optimizer in order to place all the files collectively
        into a single file for performance gains from reducing the amount of page
        requests. Rhino is used to run the r.js JavaScript file in a Java environment.
    -->
    <target name="-js.optimise">
        <java classname="org.mozilla.javascript.tools.shell.Main" failonerror="true" fork="true">
            <classpath>
                <pathelement location="${tool.rhino}" />
            </classpath>
            <arg value="${tool.rjsoptimizer}"/>
            <arg value="-o"/>
            <arg value="${rjs.optimizer.settings}"/>
            <!--
                Required to prevent a stack overflow error by increasing the stack
                size that is available the the JVM while run the RequireJS optimizer.
            -->
            <jvmarg value="-Xss128m" />
        </java>
    </target>

    <!--
        Even though all the scripts are in a single file now there is still a dependency
        on the "define" and "require" methods provided by RequireJS. To further
        reduce the amount of requests the RequireJS library is concatenated with
        the optimised JavaScript file that was created during the -js.optimise
        target. This will create a JavaScript file named "final.js" that contains
        all the JavaScript that is used by the application.
    -->
    <target name="-js.concat">
        <for param="js.file" parallel="false" list="vendor/require.js,main-optimised.js">
            <sequential>
                <concat destfile="${intermediate.dir}/js/final.js" append="yes">
                    <filelist dir="${intermediate.dir}/js" files="@{js.file}"/>
                </concat>
            </sequential>
        </for>
    </target>

    <!--
        Similar to the -css.cache target but involving the JavaScript instead. The
        URL to the JavaScript file for the application is changed to ensure the
        user gets the latest JavaScript instead of an older cached version. The
        <script> tag to load the JavaScript is changed so it no longer loads the
        RequireJS library with a data-main attribute pointed to the config. Instead
        the common approach of loading a single JavaScript file with a URL in the
        src tag is used.
    -->
    <target name="-js.cache">
        <checksum file="${intermediate.dir}/js/final.js" algorithm="sha" property="scripts.fullsha" />
        <propertyregex property="scripts.sha" input="${scripts.fullsha}" regexp=".{${hash.length}}" select="\0" />
        <property name="scripts.js" value="${intermediate.dir}/js/${scripts.sha}.js" />
        <copy file="${intermediate.dir}/js/final.js" tofile="${scripts.js}" />

        <var name="matchRegex" value="&lt;script data-main=&quot;js/config&quot; src=&quot;js/vendor/require.js&quot;&gt;&lt;/script&gt;" />
        <var name="replaceRegex" value="&lt;script src=&quot;js/${scripts.sha}.js&quot;&gt;&lt;/script&gt;" />

        <replaceregexp match="${matchRegex}" replace="${replaceRegex}" flags="m">
            <fileset dir="${intermediate.dir}" includes="${page-files}"/>
        </replaceregexp>

        <!--
            Deletes all the JS files that are no longer required, everything but
            the cached JavaScript file and Modernizr.
        -->
        <delete includeemptydirs="true">
            <fileset dir="${intermediate.dir}/js" excludes="${scripts.sha}.js, vendor/modernizr.js" />
        </delete>
    </target>

    <!--
        Takes the files that are done with being configured and optimised and places
        them in the distribution directory ready to be used wherever the application
        is being hosted.
    -->
    <target name="-package">
        <copy todir="${dist.dir}">
            <fileset dir="${intermediate.dir}" />
        </copy>
    </target>

    <!--
        There is no longer a requirement for the directory used to contain the src
        files during their manipulation so it can be deleted.
    -->
    <target name="-tidy">
        <delete dir="${intermediate.dir}" />
    </target>

    <!--
        Deletes any previous optimised image artifacts and creates a new directory
        that will contain the optimised images.
    -->
    <target name="-images-prepare">
        <delete dir="${optimisedimages.dir}" />
        <mkdir dir="${optimisedimages.dir}" />
    </target>

    <!--

    -->
    <target name="-imagespng">
        <if>
            <equals arg1="${images.strip.metadata}" arg2="true"/>
            <then>
                <var name="strip-meta-tags" value="-strip all"/>
            </then>
            <else>
                <var name="strip-meta-tags" value=""/>
            </else>
        </if>

        <apply executable="${tool.optipng}" dest="${optimisedimages.dir}" osfamily="windows">
            <fileset dir="${images.dir}" includes="**/*.png" />
            <arg value="-quiet"/>
            <arg value="-o7"/>
            <arg value="${strip-meta-tags}"/>
            <arg value="-out"/>
            <targetfile/>
            <srcfile/>
            <mapper type="identity"/>
        </apply>
    </target>
</project>
